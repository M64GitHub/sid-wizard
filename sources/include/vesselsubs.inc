; vesselsubs.inc 2021 m64
.dsection VESSEL
.section VESSEL
VESSELSTART

VESSELMODE .byte 0      ; 0 = off
                        ; 1 = vessel sync playing mode 
                        ; 2 = vessel NMI sync mode 

; main loop 

vessel  lda playadapter.playmod
        beq +           ; if playmode is 0, tune doesn't play

        lda MIDIdev
        beq goback

        lda VESSELMODE
        and #2 ; check if new NMI MODE ON
        beq wait4play

        ; NMI MODE ON, PLAY REQUESTED
        jmp VESSEL_NMIPLAY

wait4play lda #1
        beq vessel_read_midi   ; first run toggle

        lda #0
        sta wait4play+1 ; 1st run: wait4play: wait for incoming MIDI sync messages
        lda #1
        sta VESSELMODE  ; turn on vessel sync playing mode

        ; disable raster irq    
        lda $d01a
        and #$fe
        sta $d01a

        jsr vesseldisp

vessel_read_midi  
        jsr MIDIC64.GetData.vesselReadMIDI
        cpy #MIDI.StopSeqPlay
        beq midistop
        cpy #MIDI.TimingClock
        bne vessel_read_midi

do_sync jsr playadapter.playsubb        
        
        jsr vesseldisp
        jsr keyhandler.keyer
        jmp vessel

+       lda VESSELMODE
        and #1          ; check specifically for 1
        beq goback      ; if we are SYNC PLAYING (but playback OFF):
                        ; STOP sync playing, and go back

        and #2          ; if VESSELMODE was 2: EXIT from NMI SYNC
        bne midistop    ; if VESSELMODE was 0, but playback on: STOP (ie MIDI STOP, F4)
        
        ; STOP VESSEL NMI SYNC HERE
        jsr vessel_NMI_OFF
        ; stop all else and go back
midistop
        lda #0
        sta VESSELMODE

        lda #1
        sta wait4play+1

        ; re init vessel disp
        lda #1
        sta vesseldisp+1

        ; in case of MIDI stop
        lda #0
        sta playadapter.playmod

        ; re-enable raster irq
        lda $d01a
        ora #$1
        sta $d01a
        sei
        lda #$35
        sta banksel 
        jmp menu.retoedi 

goback  jsr display     ;considers menu-display over patterns (based on 'menumode' variable) 
        lda menu.menupoint ;check selected menupoint (value is 0 if no menupoint was launched)
        beq gotomainloop    ;if no menu was launched, main loop continues
        jmp menu.runmenup
gotomainloop jmp mainloop


; NMI code

vessel_NMI_ON
        lda #$7f
        sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
        sta $dd0d  ;
        lda $dc0d  ;by reading this two registers we negate any pending CIA irqs.
        lda $dd0d  ;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.

        ; NMI usually points to label 'NMI' (0aea), no need to save old vector

        lda #<VESSELNMI
        ldy #>VESSELNMI
        jsr MIDIC64.setNMI  

        ; configure VESSEL for NMI: ON 101
        ;Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100  ;Set bit2 to 1
        sta $dd00

        ;Set Port B to output
        lda #$ff
        sta $dd03

        ;Send command 0x4, enable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00001001
        sta $dd01
   
        rts

vessel_NMI_OFF
        ; disable playback in NMI handler
        lda #0
        sta VESSELMODE

        lda $dc0d  
        lda $dd0d  

        ; configure VESSEL for NMI: OFF 000
        ;Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100  ;Set bit2 to 1
        sta $dd00

        ;Set Port B to output
        lda #$ff
        sta $dd03

        ;Send command 0x4, enable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00000000
        sta $dd01

        ; restore NMI
        lda #<NMI
        ldy #>NMI
        jsr MIDIC64.setNMI  

        rts

        ; NMI PLAY ROUTINE (on NMI)
VESSELNMI
        pha
        txa
        pha        
        tya
        pha        

        lda #$ff   
        sta $d019  

        lda VESSELMODE
        and #2 ; check specifically for 2
        bne _exitNMI

        jsr playadapter.playsubb        
        jsr MIDIC64.GetData.vesselReadMIDI
        sty NMI_MIDI_BYTE
        
_exitNMI
        pla
        tay        
        pla
        tax        
        pla        

        rti  

NMI_MIDI_BYTE .byte 0

; NMI PLAY ROUTINE (main loop)
VESSEL_NMIPLAY
        jsr keyhandler.keyer ; to handle STOP
        jsr vesseldisp
        ldy NMI_MIDI_BYTE
        cpy #MIDI.StopSeqPlay
        bne +
        ; if MIDI STOP: 
        lda #0
        sta playadapter.playmod
+       jmp vessel ; main loop 


; menu point NMI MODE handling
menu_nmi_mode        
        lda VESSELMODE
        and #2
        bne _nmi_mode_off

; menu turn nmi mode on
        jsr vessel_NMI_ON
        inc menu.m64btx
        ldx #1
        lda #2
        jmp _nmi_mode_ret

_nmi_mode_off
        jsr vessel_NMI_OFF
        dec menu.m64btx
        ldx #4
        lda #0
                
_nmi_mode_ret
        sta VESSELMODE
        stx plybcol
        stx plybcol+1 ; restore border
        jmp mainloop


; display code 

vesseldisp lda #1 ; selfmod 1st chk
        beq notfirst 
        lda #0 
        sta vesseldisp+1
        sta $d020
        sta $d015
        
        ; clrscr
        ldy #0
-       lda #$20        
        sta $0400,y
        sta $0500,y
        sta $0600,y
        sta $0700,y
        lda #0
        sta $d800,y
        sta $d900,y
        sta $da00,y
        sta $db00,y
        iny
        bne -

        ; colors for numbers
        lda #$0b ; SEQPOS
        sta $d800+40*(3)+5+0
        sta $d800+40*(3)+5+1

        lda #$0e ; PTNPOS
        sta $d800+40*(5+9)+30+0
        sta $d800+40*(5+9)+30+1

        ; PTN 1-3
        lda #1
        sta $d800+40*(5+9)+4+0+1
        sta $d800+40*(5+9)+4+1+1

        sta $d800+40*(5+9)+7+0+1
        sta $d800+40*(5+9)+7+1+1

        sta $d800+40*(5+9)+10+0+1
        sta $d800+40*(5+9)+10+1+1

        ; INS 1-3
        lda #1
        sta $d800+40*(5+11)+4+0+1
        sta $d800+40*(5+11)+4+1+1

        sta $d800+40*(5+11)+7+0+1
        sta $d800+40*(5+11)+7+1+1

        sta $d800+40*(5+11)+10+0+1
        sta $d800+40*(5+11)+10+1+1

notfirst ldx #40
-       lda vessellogo,x
        cmp #$20
        beq +
        sta vidram+40*5-1,x
        inc $d800+40*5-1,x        
+       dex
        bne -

        ; disp positions
part3   lda player.SEQPOS
        and #$f0
        lsr
        lsr
        lsr
        lsr 
        sta vidram+40*(3)+5+0
        lda player.SEQPOS
        and #$0f
        sta vidram+40*(3)+5+1

        lda player.PTNPOS
        and #$f0
        lsr
        lsr
        lsr
        lsr
        sta vidram+40*(5+9)+30+0

        lda player.PTNPOS
        and #$0f
        sta vidram+40*(5+9)+30+1

        ; disp 3x pat nr
part4   lda player.CURPTN+0
        and #$f0
        lsr
        lsr
        lsr
        lsr 
        sta vidram+40*(5+9)+4+0+1
        lda player.CURPTN+0
        and #$0f
        sta vidram+40*(5+9)+4+1+1

        lda player.CURPTN+7
        and #$f0
        lsr
        lsr
        lsr
        lsr 
        sta vidram+40*(5+9)+7+0+1
        lda player.CURPTN+7
        and #$0f
        sta vidram+40*(5+9)+7+1+1

        lda player.CURPTN+14
        and #$f0
        lsr
        lsr
        lsr
        lsr 
        sta vidram+40*(5+9)+10+0+1
        lda player.CURPTN+14
        and #$0f
        sta vidram+40*(5+9)+10+1+1

; disp 3x ins
part5   lda player.CURINS+0
        and #$f0
        lsr
        lsr
        lsr
        lsr 
        sta vidram+40*(5+11)+4+0+1
        lda player.CURINS+0
        and #$0f
        sta vidram+40*(5+11)+4+1+1

        lda player.CURINS+7
        and #$f0
        lsr
        lsr
        lsr
        lsr 
        sta vidram+40*(5+11)+7+0+1
        lda player.CURINS+7
        and #$0f
        sta vidram+40*(5+11)+7+1+1

        lda player.CURINS+14
        and #$f0
        lsr
        lsr
        lsr
        lsr 
        sta vidram+40*(5+11)+10+0+1
        lda player.CURINS+14
        and #$0f
        sta vidram+40*(5+11)+10+1+1

; disp 3x gate
part6   lda mutesolo
        and #1
        bne +
        lda #$20
        ldx #15
        jmp stap1

+       lda player.WFGHOST+0
        and #1
        beq +
        
        lda #$20
        ldx #$a
        jmp stap1
           
+       lda #0
        ldx #0
stap1   sta vidram+40*(5+10)+4+0+1
        sta vidram+40*(5+10)+4+1+1
        txa 
        sta $d800+40*(5+10)+4+0+1
        sta $d800+40*(5+10)+4+1+1

        lda mutesolo+1
        and #1
        bne +
        lda #$20
        ldx #15
        jmp stap2

+       lda player.WFGHOST+7
        and #1
        beq +
        lda #$20
        ldx #$a
        jmp stap2
           
+       lda #0
        ldx #0
stap2   sta vidram+40*(5+10)+7+0+1
        sta vidram+40*(5+10)+7+1+1
        txa 
        sta $d800+40*(5+10)+7+0+1
        sta $d800+40*(5+10)+7+1+1

        lda mutesolo+2
        and #1
        bne +
        lda #$20
        ldx #15
        jmp stap3

+       lda player.WFGHOST+14
        and #1
        beq +
        lda #$20
        ldx #$a
        jmp stap3
           
+       lda #0
        ldx #0
stap3   sta vidram+40*(5+10)+10+0+1
        sta vidram+40*(5+10)+10+1+1
        txa 
        sta $d800+40*(5+10)+10+0+1
        sta $d800+40*(5+10)+10+1+1
        
        lda #4
        sta $d020
        rts
VESSELEND

.fill 93

.send VESSEL
.section data
    .enc 'screen'
    vessellogo .text "             <-VESSEL/SYNC=>             "
    VESSEL_NMI_OLD_PTR_FFFA .byte 0,0
    VESSEL_NMI_OLD_PTR_0318 .byte 0,0
.send data

.warn format(" vessel TMP WARNING IGNORE: Vesselsubs end: $%04x ($%04x remaining)", *, $D000 - *)