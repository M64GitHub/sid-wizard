; vesselnmi.inc 2021 m64

; NMI code

vessel_NMI_ON
        ; disable raster irq    
        lda $d01a
        and #$fe
        sta $d01a

        lda #$7f
        sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
        sta $dd0d  ;
        lda $dc0d  ;by reading this two registers we negate any pending CIA irqs.
        lda $dd0d  ;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.

        ; NMI usually points to label 'NMI' (0aea), no need to save old vector

        lda #<VESSELNMI
        ldy #>VESSELNMI
        jsr MIDIC64.setNMI  

        ; configure VESSEL for NMI: ON 101
        ;Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100  ;Set bit2 to 1
        sta $dd00

        ;Set Port B to output
        lda #$ff
        sta $dd03

        ;Send command 0x4, enable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00001001
        sta $dd01
   
        rts

vessel_NMI_OFF
        ; re-enable raster irq
        lda $d01a
        ora #$1
        sta $d01a

        ; disable playback in NMI handler

        lda $dc0d  
        lda $dd0d  

        ; configure VESSEL for NMI: OFF 000
        ;Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100  ;Set bit2 to 1
        sta $dd00

        ;Set Port B to output
        lda #$ff
        sta $dd03

        ;Send command 0x4, enable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00000000
        sta $dd01

        ; restore NMI
        lda #<NMI
        ldy #>NMI
        jsr MIDIC64.setNMI  

        rts

        ; NMI PLAY ROUTINE (on NMI)
VESSELNMI
        pha
        txa
        pha        
        tya
        pha        

        lda #$ff   
        sta $d019  

        ; lda VESSELMODE
        ; cmp #VMODE_NMI_SYNC
        ; bne _exitNMI

        jsr playadapter.playsubb 

        ; lda #0 
        ; jsr player.playsub     

        ; jsr player.playsub
        ; jsr commonsubs.timecount ;runtime:1 rasterline; still counts the timer to follow the music timeline
        
        jsr MIDIC64.GetData.vesselReadMIDI
        sty NMI_MIDI_BYTE
        
_exitNMI
        pla
        tay        
        pla
        tax        
        pla        

        rti  

NMI_MIDI_BYTE .byte 0

; NMI PLAY ROUTINE (main loop)
VESSEL_NMIPLAY
        jsr display
+       jmp vessel ; main loop 



; menu point NMI MODE handling
run_menupoint_syncmode        
        lda MIDIdev                     ; no MIDI no NMI     
        beq _menupoint_back             ; no MIDI no SYNC

        ; before switching to next mode:
        ; if NMI MODE is on, disable it first
        lda VESSELMODE
        cmp #2
        bne +
        jsr vessel_NMI_OFF
       
+       inc VESSELMODE                  ; circular switch to next mode
        lda VESSELMODE                  ; 
        cmp #3                          ; last?
        bne +

        ldx #4
        lda #0                          ; --- set to OFF ---
        sta VESSELMODE
        jmp _menup_sync_mode_ret        ; and go back

+       cmp #VMODE_EXT_MIDI_SYNC        ; if EXT MIDI SYNC
        bne +
        ; nothing special to prepare here
        ldx #7 ; ext MIDI sync is yellow
        jmp _menup_sync_mode_ret
        
+       cmp #VMODE_NMI_SYNC
        beq +

        ; unknown mode:
        lda #0
        sta VESSELMODE
        ldx #4
        jmp _menup_sync_mode_ret 
        
+       ; menu turn nmi mode on
        jsr vessel_NMI_ON
        ldx #1
        stx playadapter.playmod
        lda #2
        jmp _menup_sync_mode_ret

_nmi_mode_off
        jsr vessel_NMI_OFF
        ldx #4
                
_menup_sync_mode_ret
        stx plybcol
        stx plybcol+1 ; restore border
        sta menu.m64btx
_menupoint_back       
        jmp mainloop