; vesselnmi.inc 2021 m64

; NMI code

vessel_NMI_ON
        ; disable raster irq    
        lda $d01a
        and #$fe
        sta $d01a

        lda #$7f
        sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
        sta $dd0d  ;
        lda $dc0d  ;by reading this two registers we negate any pending CIA irqs.
        lda $dd0d  ;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
        
        lda #%10010000 ; /FLAG only
        sta $dd0d

        ; configure VESSEL for NMI: ON 1001
        ;Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100  ;Set bit2 to 1
        sta $dd00

        ;Set Port B to output
        lda #$ff
        sta $dd03

        ;Send command 0x4, enable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00001001 ; Vessel CFG Featues: NMI + NMI status only
        sta $dd01

        ; NMI usually points to label 'NMI' (0aea), no need to save old vector

        lda #<VESSELNMI
        ldy #>VESSELNMI
        jsr MIDIC64.setNMI
   
        rts

vessel_NMI_OFF
        ; disable playback in NMI handler

        lda #$7f
        sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
        sta $dd0d  ;

        lda $dc0d  
        lda $dd0d  

        ; configure VESSEL for NMI: OFF 
        ; Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000000  ;Set bit2 to 1
        sta $dd00

        ; Set Port B to output
        lda #$ff
        sta $dd03

        ; Send command 0x4, disable NMI.
        lda #$fd
        sta $dd01
        lda #$04
        sta $dd01
        lda #%00000000
        sta $dd01

        ; restore NMI
        lda #<NMI
        ldy #>NMI
        jsr MIDIC64.setNMI  

        lda #$7f
        sta $dd0d

        ; re-enable raster irq
        lda $d01a
        ora #$1
        sta $d01a

        rts

        ; NMI PLAY ROUTINE (on NMI)
VESSELNMI
        pha
        txa
        pha        
        tya
        pha        

        bit $dd0d
        
        inc $d020

        ; jsr playadapter.playsubb

        ; {
        ;   jsr playadapter.playsubb
        ; }
        ;
        ; /
        ; {
        ;   jsr player.playsub
        ;   jsr commonsubs.timecount
        ;   jsr playadapter.padapter
        ; }

        jsr NMIReadMIDI

_exitNMI
        pla
        tay        
        pla
        tax        
        pla        

        rti  

NMI_MIDI_STOP .byte 0

; NMI PLAY ROUTINE (main loop)
VESSEL_NMIPLAY
        inc $d021        
        inc vidram

        ; jsr display
        lda NMI_MIDI_STOP
        beq +

        ; MIDI STOP: stop playback
        lda #0
        sta $d020
        sta $d021
        sta NMI_MIDI_STOP
        sta playadapter.playmod
        sta VESSELMODE
        lda #1
        sta wait4play+1
        ; re init vessel disp
        lda #1
        sta vesseldisp+1

        jsr vessel_NMI_OFF

        sei
        lda #$35
        sta banksel 
        jmp menu.retoedi 

+       jmp VESSEL_NMIPLAY 

; NMI MIDI READ Routine
NMIReadMIDI ; read without changing border color
        ; Reset PA2 to signal INPUT mode
        lda $dd00
        and #%11111011 ; Set bit2 to 0
        sta $dd00
        ; Set Port B to input
        lda #$00
        sta $dd03

        ; Read the available number of bytes. Max number of bytes in one go is 255 (not 256)
        ldy $dd01 ; Read bytecount from Port B
        beq _VesselEmpty
_RxByte lda $dd01 ; Read MIDI byte from Port B
        cmp #MIDI.StopSeqPlay
        bne +
        lda #1
        sta NMI_MIDI_STOP
+       dey
        bne _RxByte
_VesselEmpty
        ; Set PA2 to 1 to signal OUTPUT
        lda $dd00
        ora #%00000100
        sta $dd00
        ; Set Port B to output
        lda #$ff
        sta $dd03
        tya 
        rts

; menu point NMI MODE handling
run_menupoint_syncmode        
        lda MIDIdev                     ; no MIDI no NMI     
        beq _menupoint_back             ; no MIDI no SYNC

        ; before switching to next mode:
        ; if NMI MODE is on, disable it first
        lda VESSELMODE
        cmp #2
        bne +
        jsr vessel_NMI_OFF
       
+       inc VESSELMODE                  ; circular switch to next mode
        lda VESSELMODE                  ; 
        cmp #3                          ; last?
        bne +

        ldx #4                          ; restart at 0
        lda #0
        sta VESSELMODE
        jmp _menup_sync_mode_ret        ; and go back

+       cmp #VMODE_EXT_MIDI_SYNC        ; if EXT MIDI SYNC
        bne +
        ; nothing special to prepare here
        ldx #7 ; ext MIDI sync is yellow
        jmp _menup_sync_mode_ret
        
+       cmp #VMODE_NMI_SYNC
        beq +

        ; unknown mode:
        lda #0
        sta VESSELMODE
        ldx #4
        jmp _menup_sync_mode_ret 
        
+       ; menu turn nmi mode on
        ; do F1 first

_VNMI_PlayBeg 
        ; ldx #0 ;reset tune and play from beginning
        ; stx IRQ.fspdctr+1 ;start with 1st raster of course
        ; stx playadapter.maxrasti ;reset rastertime-measuring
        ; ldx #1
        ; stx playadapter.followp+1 ;if commodore key is pressed together, follow-playing switches ON, else OFF
        ; lda #1
        ; sta playadapter.playmod
        ; jsr playadapter.ptploff ;switch off pattern-playing in player-code (playadapter.inc)

        jsr vessel_NMI_ON
        lda #$35
        sta banksel 
        jmp VESSEL_NMIPLAY
; -----------------

        jmp _menup_sync_mode_ret

_nmi_mode_off
        jsr vessel_NMI_OFF
        ldx #4
                
_menup_sync_mode_ret
        stx plybcol
        stx plybcol+1 ; restore border
        sta menu.m64btx
_menupoint_back       
        jmp vessel